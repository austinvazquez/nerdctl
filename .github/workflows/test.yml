name: test

on:
  push:
    branches:
      - main
      - 'release/**'
  pull_request:
    paths-ignore:
      - '**.md'

env:
  GO_VERSION: 1.22.x

jobs:
  lint:
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 1
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6.1.0
        with:
          version: v1.59.1
          args: --verbose
      - name: yamllint-lint
        run: make lint-yaml
      - name: shellcheck
        run: make lint-shell
      - name: go imports ordering
        run: |
          go install -v github.com/incu6us/goimports-reviser/v3@latest
          make lint-imports

  test-unit:
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 1
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true
      - name: "Run unit tests"
        run: go test -v ./pkg/...

  test-integration:
    runs-on: "ubuntu-${{ matrix.ubuntu }}"
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        # ubuntu-20.04: cgroup v1, ubuntu-22.04 and later: cgroup v2
        include:
          - ubuntu: 20.04
            containerd: v1.6.33
          - ubuntu: 22.04
            containerd: v1.7.19
          - ubuntu: 24.04
            containerd: v2.0.0-rc.3
    env:
      UBUNTU_VERSION: "${{ matrix.ubuntu }}"
      CONTAINERD_VERSION: "${{ matrix.containerd }}"
    steps:
      - uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 1
      - name: "Prepare integration test environment"
        run: docker build -t test-integration --target test-integration --build-arg UBUNTU_VERSION=${UBUNTU_VERSION} --build-arg CONTAINERD_VERSION=${CONTAINERD_VERSION} .
      - name: "Remove snap loopback devices (conflicts with our loopback devices in TestRunDevice)"
        run: |
          sudo systemctl disable --now snapd.service snapd.socket
          sudo apt-get purge -y snapd
          sudo losetup -Dv
          sudo losetup -lv
      - name: "Register QEMU (tonistiigi/binfmt)"
        run: |
          # `--install all` will only install emulation for architectures that cannot be natively executed
          # Since some arm64 platforms do provide native fallback execution for 32 bits,
          # armv7 emulation may or may not be installed, causing variance in the result of `uname -m`.
          # To avoid that, we explicitly list the architectures we do want emulation for.
          docker run --privileged --rm tonistiigi/binfmt --install linux/amd64
          docker run --privileged --rm tonistiigi/binfmt --install linux/arm64
          docker run --privileged --rm tonistiigi/binfmt --install linux/arm/v7
      - name: "Run integration tests"
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 2
          retry_on: error
          command: docker run -t --rm --privileged test-integration

  test-integration-docker-compatibility:
    runs-on: ubuntu-24.04
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 1
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          check-latest: true
      - name: "Print docker info"
        run: |
          set -eux -o pipefail
          docker info
          docker version
      - name: "Register QEMU (tonistiigi/binfmt)"
        run: |
          # `--install all` will only install emulation for architectures that cannot be natively executed
          # Since some arm64 platforms do provide native fallback execution for 32 bits,
          # armv7 emulation may or may not be installed, causing variance in the result of `uname -m`.
          # To avoid that, we explicitly list the architectures we do want emulation for.
          docker run --privileged --rm tonistiigi/binfmt --install linux/amd64
          docker run --privileged --rm tonistiigi/binfmt --install linux/arm64
          docker run --privileged --rm tonistiigi/binfmt --install linux/arm/v7
      - name: "Prepare integration test environment"
        run: |
          sudo apt-get install -y expect
      - name: "Ensure that the integration test suite is compatible with Docker"
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 2
          retry_on: error
          command: go test -timeout 20m -v -exec sudo ./cmd/nerdctl/... -args -test.target=docker -test.kill-daemon
      - name: "Ensure that the IPv6 integration test suite is compatible with Docker"
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 2
          retry_on: error
          command: go test -timeout 20m -v -exec sudo ./cmd/nerdctl/... -args -test.target=docker -test.kill-daemon -test.ipv6
